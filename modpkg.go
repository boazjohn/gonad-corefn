package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path"

	"github.com/metaleap/go-util/dev/ps"
)

type modPkg struct {
	reGenIr        bool
	qName          string //	eg	Control.Monad.Eff.Uncurried, My.Main etc
	lName          string //	eg	Uncurried, Main etc
	pName          string //	eg	Control_Monad_Eff_Uncurried, My_Main etc
	srcFilePath    string //	eg	bower_components/purescript-eff/src/Control/Monad/Eff/Uncurried.purs or src/My/Main.purs etc
	cfnFilePath    string //	eg	output/Control.Monad.Eff.Uncurried/corefn.json, output/My.Main/corefn.json etc
	impFilePath    string //	eg	output/Control.Monad.Eff.Uncurried/coreimp.json, output/My.Main/coreimp.json etc
	extFilePath    string //	eg	output/Control.Monad.Eff.Uncurried/externs.json, output/My.Main/externs.json etc
	irMetaFilePath string //	eg	output/Control.Monad.Eff.Uncurried/gonad.json, output/My.Main/gonad.json etc
	goOutDirPath   string //	eg	Control/Monad/Eff/Uncurried, My/Main etc
	goOutFilePath  string //	eg	Control/Monad/Eff/Uncurried/Uncurried.go, My/Main/Main.go etc

	irMeta        *irMeta
	irAst         *irAst
	proj          *psPkg // parent
	gopkgfilepath string // full target file path (not necessarily absolute but starting with the given gopath)
	ext           *udevps.Extern
	coreimp       *udevps.CoreImp
	corefn        *udevps.CoreFn
}

func findModuleByQName(qname string) (modinfo *modPkg) {
	if qname != "" {
		if modinfo = Proj.moduleByQName(qname); modinfo == nil {
			for _, dep := range Deps {
				if modinfo = dep.moduleByQName(qname); modinfo != nil {
					return
				}
			}
		}
	}
	return
}

func findModuleByPName(pname string) (modinfo *modPkg) {
	if pname != "" {
		if modinfo = Proj.moduleByPName(pname); modinfo == nil {
			for _, dep := range Deps {
				if modinfo = dep.moduleByPName(pname); modinfo != nil {
					return
				}
			}
		}
	}
	return
}

func (me *modPkg) impPath() string {
	return path.Join(me.proj.GoOut.PkgDirPath, me.goOutDirPath)
}

func (me *modPkg) loadPkgIrMeta() (err error) {
	var jsonbytes []byte
	if jsonbytes, err = ioutil.ReadFile(me.irMetaFilePath); err == nil {
		if err = json.Unmarshal(jsonbytes, &me.irMeta); err == nil {
			me.irMeta.mod = me
		}
	}
	return
}

func (me *modPkg) populatePkgIrMeta() {
	if me.coreimp == nil && me.corefn == nil {
		me.irMeta.populateFromLoaded()
	} else {
		me.irMeta.populateFromCoreImp()
	}
}

func (me *modPkg) reGenPkgIrMeta() (err error) {
	var jsonbytes []byte
	if jsonbytes, err = ioutil.ReadFile(me.extFilePath); err == nil {
		if err = json.Unmarshal(jsonbytes, &me.ext); err == nil {
			if jsonbytes, err = ioutil.ReadFile(me.impFilePath); err == nil {
				if err = json.Unmarshal(jsonbytes, &me.coreimp); err == nil {
					if jsonbytes, err = ioutil.ReadFile(me.cfnFilePath); err == nil {
						if err = json.Unmarshal(jsonbytes, &me.corefn); err == nil {
							me.irMeta = &irMeta{isDirty: true, mod: me}
						}
					}
				}
			}
		}
	}
	return
}

func (me *modPkg) prepIrAst() {
	me.irAst = &irAst{mod: me, irM: me.irMeta}
	me.irAst.prepFromCoreImp()
}

func (me *modPkg) reGenPkgIrAst() {
	me.irAst.finalizePostPrepOps()
}

func (me *modPkg) writeGoFile() (err error) {
	var f *os.File
	if f, err = os.Create(me.gopkgfilepath); err == nil {
		defer f.Close()
		if !Flag.NoPrefix {
			_, err = fmt.Fprintf(f, "// Generated by gonad from: %s, generated from: %s\n", me.cfnFilePath, me.srcFilePath)
		}
		if err == nil {
			err = me.irAst.writeAsGoTo(f)
		}
	}
	return
}

func (me *modPkg) writeIrAstFile() (err error) {
	var f *os.File
	if f, err = os.Create(me.irMetaFilePath[:len(me.irMetaFilePath)-len(".json")] + ".ast.json"); err == nil {
		defer f.Close()
		me.irAst.writeAsJsonTo(f)
	}
	return
}

func (me *modPkg) writeIrMetaFile() (err error) {
	var f *os.File
	if f, err = os.Create(me.irMetaFilePath); err == nil {
		defer f.Close()
		if err = me.irMeta.writeAsJsonTo(f); err == nil {
			me.irMeta.isDirty = false
		}
	}
	return
}
